"""Глобальная команда «стоп» и управление обработчиками остановки.

Этот модуль предоставляет простейший реестр функций, которые необходимо
вызвать при поступлении команды остановки.  Навыки могут зарегистрировать
свои обработчики, чтобы корректно прекращать собственную активность
(например, глушить сигналы таймера или отменять воспроизведение звука).
"""
from __future__ import annotations

from typing import Callable, List

# Список зарегистрированных обработчиков
_handlers: List[Callable[[], bool]] = []


def register(handler: Callable[[], bool]) -> None:
    """Регистрирует функцию *handler* для реакции на команду «стоп».

    Обработчик должен вернуть ``True``, если он действительно что-то
    остановил.  Это позволит при необходимости прекратить перебор
    оставшихся обработчиков.
    """

    _handlers.append(handler)


def trigger() -> bool:
    """Вызывает все зарегистрированные обработчики остановки.

    Возвращает ``True``, если хотя бы один обработчик сообщил,
    что остановил свою активность.
    """

    handled = False
    for h in list(_handlers):  # работаем с копией, вдруг список изменится
        try:
            handled = h() or handled
        except Exception:
            # ошибки в отдельных обработчиках не должны прерывать цепочку
            pass
    return handled
