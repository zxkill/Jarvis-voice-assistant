"""Функции генерации распределений для Jarvis.

В модуле собраны простые обёртки над генераторами случайных чисел
стандартной библиотеки.  Они позволяют получить значения из
равномерного и нормального распределений с возможностью управлять
seed и внешним генератором случайных чисел.

Примеры
=======

Получение значения из равномерного распределения:

>>> uniform(0, 1, seed=42)  # doctest: +ELLIPSIS
0.639...

Получение значения из нормального распределения:

>>> normal(0, 1, seed=42)  # doctest: +ELLIPSIS
-0.144...
"""

from __future__ import annotations

import logging
import random
from typing import Optional

# Настраиваем логгер модуля. Отдельный логгер упрощает отладку и
# позволяет тонко управлять уровнем детализации сообщений.
log = logging.getLogger(__name__)


def uniform(
    a: float,
    b: float,
    seed: Optional[int] = None,
    rng: Optional[random.Random] = None,
) -> float:
    """Вернуть число из равномерного распределения.

    Параметры ``a`` и ``b`` задают диапазон, в котором будет
    сгенерировано значение. Для воспроизводимости можно передать
    ``seed`` или готовый экземпляр ``random.Random`` через ``rng``.

    :param a: нижняя граница диапазона
    :param b: верхняя граница диапазона
    :param seed: необязательное значение для детерминированности
    :param rng: внешний генератор случайных чисел
    :return: псевдослучайное число в диапазоне ``[a, b]``
    """
    if rng is None:
        rng = random.Random(seed)
    value = rng.uniform(a, b)
    # Подробное логирование помогает анализировать процесс генерации
    # случайных чисел при тестировании и в продакшене.
    log.debug("Равномерное распределение a=%s b=%s -> %s", a, b, value)
    return value


def normal(
    mu: float,
    sigma: float,
    seed: Optional[int] = None,
    rng: Optional[random.Random] = None,
) -> float:
    """Вернуть число из нормального распределения.

    Значение определяется параметрами ``mu`` (математическое ожидание)
    и ``sigma`` (среднеквадратичное отклонение).  Для детерминированных
    результатов можно указать ``seed`` или передать собственный
    генератор ``rng``.

    :param mu: математическое ожидание распределения
    :param sigma: стандартное отклонение
    :param seed: необязательное значение для воспроизводимости
    :param rng: внешний генератор случайных чисел
    :return: псевдослучайное число из нормального распределения
    """
    if rng is None:
        rng = random.Random(seed)
    value = rng.gauss(mu, sigma)
    log.debug("Нормальное распределение mu=%s sigma=%s -> %s", mu, sigma, value)
    return value
