"""–ú–æ–¥—É–ª–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ —Ä–∞–±–æ—Ç—É –¥–∞—Ç—á–∏–∫–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.

–ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –º–µ—Ö–∞–Ω–∏–∑–º—ã —è–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
–∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞, –∞ —Ç–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å
``display``. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–Ω–∞–±–∂–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
–æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.
"""

from __future__ import annotations

import logging
from dataclasses import dataclass
from typing import Dict

from display import DisplayItem, get_driver

# –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è
log = logging.getLogger(__name__)


@dataclass
class _SensorState:
    """–•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–Ω—Å–æ—Ä–∞."""

    consent: bool = False
    active: bool = False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–µ–Ω—Å–æ—Ä–æ–≤
_SENSORS: Dict[str, _SensorState] = {
    "camera": _SensorState(),
    "microphone": _SensorState(),
}


def grant_consent(sensor: str) -> None:
    """–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–∞."""

    state = _SENSORS.setdefault(sensor, _SensorState())
    state.consent = True
    log.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ %s", sensor)


def revoke_consent(sensor: str) -> None:
    """–û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    state = _SENSORS.setdefault(sensor, _SensorState())
    state.consent = False
    state.active = False
    # –ü—Ä–∏ –æ—Ç–∑—ã–≤–µ —Å–æ–≥–ª–∞—Å–∏—è –≤—ã–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    get_driver().draw(DisplayItem(kind=sensor, payload=None))
    log.warning("–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ %s –æ—Ç–æ–∑–≤–∞–Ω–æ", sensor)


def _ensure_consent(sensor: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ–≥–ª–∞—Å–∏—è, –∏–Ω–∞—á–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å ``PermissionError``."""

    state = _SENSORS.setdefault(sensor, _SensorState())
    if not state.consent:
        log.error("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ %s –±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è", sensor)
        raise PermissionError(f"–ù–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {sensor}")


def set_active(sensor: str, active: bool) -> None:
    """–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–µ–Ω—Å–æ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞."""

    _ensure_consent(sensor)
    state = _SENSORS.setdefault(sensor, _SensorState())
    state.active = active
    icon = "üì∑" if sensor == "camera" else "üé§"
    payload = icon if active else None
    get_driver().draw(DisplayItem(kind=sensor, payload=payload))
    log.info("%s %s", sensor, "–∞–∫—Ç–∏–≤–µ–Ω" if active else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")


def is_active(sensor: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Å–µ–Ω—Å–æ—Ä."""

    return _SENSORS.get(sensor, _SensorState()).active


__all__ = [
    "grant_consent",
    "revoke_consent",
    "set_active",
    "is_active",
]

