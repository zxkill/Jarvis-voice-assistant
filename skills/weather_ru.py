# -*- coding: utf-8 -*-
"""skills/weather_ru.py ‚Äî¬†–ø–æ–≥–æ–¥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥—ë–Ω –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä (`core.logging_json.configure_logging`).
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏: —Å—Ç–∞—Ä—Ç/—Ñ–∏–Ω–∏—à HTTP‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤, –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞, –∫–æ–¥—ã –æ—à–∏–±–æ–∫,
  –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
‚Ä¢ –í—Å–µ `print()` –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ `log.debug/info/warning/error`.
"""
from __future__ import annotations

import datetime as _dt
import os as _os
import re as _re
import time as _time
from typing import Dict, Tuple

import threading as _th
import requests as _rq

from display import DisplayItem, get_driver
from core.logging_json import configure_logging

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOGGING ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log = configure_logging(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LAT: str = _os.getenv("WTTR_LAT", "53.37977235908946")
LON: str = _os.getenv("WTTR_LON", "58.990413992217746")
CITY: str = _os.getenv("JARVIS_CITY", "–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫–µ")
WTTR_TIMEOUT = 1           # —Å–µ–∫
OPENMETEO_TIMEOUT = 4      # —Å–µ–∫
FORECAST_DAYS = 3
AUTO_UPDATE_INTERVAL = 1800  # —Å–µ–∫ –¥–ª—è –¥–∏—Å–ø–ª–µ—è

_cache_lock = _th.Lock()
_cache_data = {}
_cache_source = ""

_ICON = {
    0: "‚òÄÔ∏è", 1: "‚õÖ", 2: "‚òÅÔ∏è",
    62: "üåßÔ∏è", 73: "üå®Ô∏è", 45: "üå´Ô∏è",
}

# WMO weather codes ‚Üí —Ä—É—Å—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (–¥–ª—è Open‚ÄëMete–æ)
WEATHER_CODES_RU: Dict[int, str] = {
    0: "—è—Å–Ω–æ",
    1: "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
    2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    3: "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω", 48: "—Å–∏–ª—å–Ω—ã–π —Ç—É–º–∞–Ω",
    51: "–ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å", 53: "–º–æ—Ä–æ—Å—å", 55: "—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    56: "–ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å", 57: "—Å–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
    61: "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", 63: "—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å", 65: "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    66: "–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å", 67: "—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
    71: "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥", 73: "—Å–Ω–µ–≥", 75: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    77: "—Å–Ω–µ–∂–Ω–∞—è –∫—Ä—É–ø–∞",
    80: "–ª–∏–≤–µ–Ω—å", 81: "—Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å", 82: "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
    85: "—Å–Ω–µ–∂–Ω—ã–π –∑–∞—Ä—è–¥", 86: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–∂–Ω—ã–π –∑–∞—Ä—è–¥",
    95: "–≥—Ä–æ–∑–∞", 96: "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º", 99: "—Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
}

WEEKDAYS_RU = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# ‚îÄ‚îÄ‚îÄ PATTERNS (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ –∂–µ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BASE_PATTERNS = [
    "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥–∞ –Ω–∞ —É–ª–∏—Ü–µ",
    "—á—Ç–æ —Ç–∞–º —Å –ø–æ–≥–æ–¥–æ–π", "–∫–∞–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
]
EXTRA = ["–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"] + WEEKDAYS_RU
PATTERNS = BASE_PATTERNS + \
    [f"–ø–æ–≥–æ–¥–∞ {w}" for w in EXTRA] + \
    [f"–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ {w}" for w in EXTRA] + \
    [f"–ø–æ–≥–æ–¥–∞ –≤ {d}" for d in WEEKDAYS_RU] + \
    [f"–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ {d}" for d in WEEKDAYS_RU]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UTILS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _plural(n: int, forms: Tuple[str, str, str]) -> str:
    n = abs(n) % 100
    if 11 <= n <= 19:
        return forms[2]
    i = n % 10
    if i == 1:
        return forms[0]
    if 2 <= i <= 4:
        return forms[1]
    return forms[2]


def _detect_offset(text: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ –∫–∞–∫–æ–º –¥–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    t = text.lower()
    today = _dt.date.today()
    if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in t:
        return 2
    if "–∑–∞–≤—Ç—Ä–∞" in t:
        return 1
    for delta in range(1, FORECAST_DAYS):
        if WEEKDAYS_RU[(today + _dt.timedelta(days=delta)).weekday()] in t:
            return delta
    m = _re.search(r"(\d{1,2})[.\s](\d{1,2})", t)
    if m:
        day, month = map(int, m.groups())
        try:
            target = _dt.date(today.year, month, day)
            delta = (target - today).days
            if 0 <= delta < FORECAST_DAYS:
                return delta
        except ValueError:
            pass
    return 0

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ HTTP WRAPPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _timed_get(url: str, timeout: int) -> _rq.Response:
    t0 = _time.perf_counter()
    resp = _rq.get(url, timeout=timeout)
    dt = (_time.perf_counter() - t0) * 1000
    log.debug("GET %s ‚Üí %s in %.0f ms", url, resp.status_code, dt)
    resp.raise_for_status()
    return resp

# wttr.in --------------------------------------------------------

def _fetch_wttr(lat: str, lon: str):
    url = f"https://wttr.in/{lat},{lon}?format=j1"
    return _timed_get(url, WTTR_TIMEOUT).json()


def _wttr_desc(obj) -> str:
    return (obj.get("lang_ru", [{}])[0].get("value") or obj["weatherDesc"][0]["value"]).lower()


def _build_answer_wttr(city: str, data, offset: int) -> str:
    if offset == 0:
        cur = data["current_condition"][0]
        temp = round(float(cur["temp_C"]))
        cond_ru = _wttr_desc(cur)
        prefix = "–°–µ–π—á–∞—Å"
    else:
        daily = data["weather"][offset]
        tmax = round(float(daily["maxtempC"]))
        tmin = round(float(daily["mintempC"]))
        temp = round((tmax + tmin) / 2)
        cond_ru = _wttr_desc(daily["hourly"][4 if len(daily["hourly"]) > 4 else 0])
        prefix = ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"][offset] if offset < 3 else (
            f"–í {WEEKDAYS_RU[(_dt.date.today() + _dt.timedelta(days=offset)).weekday()]}"
        )
    degree = _plural(temp, ("–≥—Ä–∞–¥—É—Å", "–≥—Ä–∞–¥—É—Å–∞", "–≥—Ä–∞–¥—É—Å–æ–≤"))
    sign = "—Ç–µ–ø–ª–∞" if temp > 0 else ("–º–æ—Ä–æ–∑–∞" if temp < 0 else "")
    return f"{prefix} –≤ {city} {abs(temp)} {degree} {sign}, {cond_ru}.".strip()

# Open‚ÄëMeteo ------------------------------------------------------

def _fetch_openmeteo(lat: str, lon: str):
    url = (
        "https://api.open-meteo.com/v1/forecast"
        f"?latitude={lat}&longitude={lon}"
        "&current=temperature_2m,weather_code"
        "&daily=weather_code,temperature_2m_max,temperature_2m_min"
        f"&forecast_days={FORECAST_DAYS}&timezone=auto"
    )
    return _timed_get(url, OPENMETEO_TIMEOUT).json()


def _build_answer_openmeteo(city: str, data, offset: int) -> str:
    if offset == 0:
        temp = round(data["current"]["temperature_2m"])
        code = data["current"]["weather_code"]
        prefix = "–°–µ–π—á–∞—Å"
    else:
        idx = offset
        tmax = data["daily"]["temperature_2m_max"][idx]
        tmin = data["daily"]["temperature_2m_min"][idx]
        temp = round((tmax + tmin) / 2)
        code = data["daily"]["weather_code"][idx]
        prefix = ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"][offset] if offset < 3 else (
            f"–í {WEEKDAYS_RU[(_dt.date.today() + _dt.timedelta(days=offset)).weekday()]}"
        )
    cond_ru = WEATHER_CODES_RU.get(code, "")
    degree = _plural(temp, ("–≥—Ä–∞–¥—É—Å", "–≥—Ä–∞–¥—É—Å–∞", "–≥—Ä–∞–¥—É—Å–æ–≤"))
    sign = "—Ç–µ–ø–ª–∞" if temp > 0 else ("–º–æ—Ä–æ–∑–∞" if temp < 0 else "")
    return f"{prefix} –≤ {city} {abs(temp)} {degree} {sign}, {cond_ru}.".strip()


def _update_cache() -> None:
    global _cache_data, _cache_source
    try:
        log.debug("Updating weather cache from wttr.in")
        data = _fetch_wttr(LAT, LON)
        source = "wttr"
    except Exception as exc:
        log.warning("Wttr failed: %s ‚Äî fallback to OpenMeteo", exc)
        data = _fetch_openmeteo(LAT, LON)
        source = "openmeteo"
    with _cache_lock:
        _cache_data = data
        _cache_source = source

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PUBLIC API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def handle(text: str) -> str:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–∏–ª–ª‚Äë—Ö–µ–Ω–¥–ª–µ—Ä."""
    offset = _detect_offset(text)
    answer = _build_answer(offset)
    log.info("Weather answer: %s", answer)
    return answer


def auto_update():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–ø–¥–µ–π—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞."""
    _update_cache()
    temp, icon = _current_for_display()
    log.debug("Display update: %d¬∞C %s", temp, icon)
    drv = get_driver()
    drv.draw(DisplayItem(kind="weather", payload=f"{temp:02d}¬∞C {icon}"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ INTERNALS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _current_for_display() -> Tuple[int, str]:
    with _cache_lock:
        data = _cache_data
        source = _cache_source
    if not data:
        _update_cache()
        with _cache_lock:
            data = _cache_data
            source = _cache_source
    try:
        if source == "wttr":
            cur = data["current_condition"][0]
            temp = round(float(cur["temp_C"]))
            code = int(cur.get("weatherCode", 0))
        else:
            cw = data.get("current", {})
            temp = round(float(cw.get("temperature_2m", 0)))
            code = int(cw.get("weathercode", cw.get("weather_code", 0)))
        icon = _ICON.get(code, "")
        return temp, icon
    except Exception as exc:
        log.error("Display cache error: %s", exc)
        return 0, ""


def _build_answer(offset: int = 0) -> str:
    with _cache_lock:
        data = _cache_data
        source = _cache_source
    if not data:
        log.debug("Weather cache empty, updating synchronously")
        _update_cache()
        with _cache_lock:
            data = _cache_data
            source = _cache_source
    if source == "wttr":
        log.debug("Using wttr.in cached data")
        return _build_answer_wttr(CITY, data, offset)
    log.debug("Using Open‚ÄëMeteo cached data")
    return _build_answer_openmeteo(CITY, data, offset)
