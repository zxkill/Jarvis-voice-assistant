# jarvis_skills.py
"""
–ú–∏–Ω–∏-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è Jarvis-Pi.
–°–∫–∏–ª–ª = .py-—Ñ–∞–π–ª –≤ ./skills c –¥–≤—É–º—è –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏:

    PATTERNS = ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞"]
    def handle(text: str) -> str

PATTERNS —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ fuzzy-ratio; handle(text) –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è,
–µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ > THRESHOLD.
"""

import sys
import time
import types
import importlib
import importlib.util
import threading
import asyncio
from pathlib import Path

from rapidfuzz import fuzz   # —É–∂–µ –µ—Å—Ç—å –≤ requirements.txt
from core.logging_json import configure_logging
from core.nlp import normalize

log = configure_logging("skills.router")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SKILLS_DIR    = Path(__file__).parent / "skills"
POLL_INTERVAL = 1.0   # —á–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Å–µ–∫.)
THRESHOLD     = 70    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ handle()

_loaded: list[tuple[list[str], callable]] = []  # [(PATTERNS, handle), ‚Ä¶]
_scheduled: dict[str, asyncio.Task] = {}

# ‚îÄ‚îÄ‚îÄ –î–µ–ª–∞–µ–º –ø–∞–∫–µ—Ç ¬´skills¬ª, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if "skills" not in sys.modules:
    pkg = types.ModuleType("skills")
    pkg.__path__ = [str(SKILLS_DIR)]   # —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç –º–æ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ñ–∞–π–ª—ã
    sys.modules["skills"] = pkg

# ‚îÄ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _path_to_module(path: Path) -> str:
    """skills/weather_ru.py ‚Üí skills.weather_ru"""
    rel = path.relative_to(SKILLS_DIR.parent).with_suffix("")
    return ".".join(rel.parts)  # 'skills', 'weather_ru' ‚Üí 'skills.weather_ru'

def _register(mod):
    """–ö–ª–∞–¥—ë—Ç PATTERNS/handle –∏–∑ *mod* –≤ —Å–ø–∏—Å–æ–∫ _loaded."""
    pats = [normalize(p) for p in getattr(mod, "PATTERNS", [])]
    func = getattr(mod, "handle",   None)
    if pats and callable(func):
        _loaded.append((pats, func))

def _load_file(py_file: Path):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç (–∏–ª–∏ –ø–µ—Ä–µ-–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç) —Ñ–∞–π–ª-—Å–∫–∏–ª–ª –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ."""
    mod_name = _path_to_module(py_file)          # skills.weather_ru
    # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
    for t in _scheduled.pop(mod_name, []):
        t.cancel()
    if mod_name in sys.modules:                  # üîÑ reload
        mod = importlib.reload(sys.modules[mod_name])
    else:                                        # ‚ûï –ø–µ—Ä–≤—ã–π –∏–º–ø–æ—Ä—Ç
        spec = importlib.util.spec_from_file_location(mod_name, py_file)
        mod  = importlib.util.module_from_spec(spec)
        sys.modules[mod_name] = mod              # –≤–∞–∂–Ω–æ: –µ–¥–∏–Ω–æ–µ –∏–º—è!
        spec.loader.exec_module(mod)             # type: ignore[arg-type]
    _register(mod)
    _schedule_autoupdate(mod)

# ‚îÄ‚îÄ‚îÄ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ .py-—Ñ–∞–π–ª–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _watch_skills():
    mtimes: dict[Path, float] = {}
    while True:
        for f in SKILLS_DIR.glob("*.py"):
            mtime = f.stat().st_mtime
            if mtimes.get(f) != mtime:
                mtimes[f] = mtime
                mod_name = _path_to_module(f)

                # 1) —É–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
                _loaded[:] = [
                    (p, h) for (p, h) in _loaded
                    if h.__module__ != mod_name
                ]
                # 2) –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–π –∫–æ–¥ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
                _load_file(f)

                log.info("üîÑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª %s", mod_name)
        time.sleep(POLL_INTERVAL)

def start_skill_reloader() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫-–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å."""
    threading.Thread(target=_watch_skills, daemon=True).start()

# ‚îÄ‚îÄ‚îÄ –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–∫–∏–ª–ª–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_all() -> None:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É ./skills –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã."""
    _loaded.clear()
    SKILLS_DIR.mkdir(exist_ok=True)

    # –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞–≤—ã–∫ intel_status, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    intel = SKILLS_DIR / "intel_status.py"
    if intel.exists():
        _load_file(intel)
    for f in SKILLS_DIR.glob("*.py"):
        if f.name == "intel_status.py":
            continue
        _load_file(f)

# ‚îÄ‚îÄ‚îÄ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–µ–ø–ª–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def handle_utterance(text: str) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Å–∫–∏–ª–ª –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ä–µ–ø–ª–∏–∫—É."""
    text_low = normalize(text).lower()
    best_func, best_score = None, 0

    for patterns, func in _loaded:
        for p in patterns:
            p_low = p.lower()
            score = max(
                fuzz.ratio(text_low, p_low),           # –ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                fuzz.token_set_ratio(text_low, p_low)  # –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –Ω–µ –≤–∞–∂–µ–Ω
            )
            if score > best_score:
                best_score, best_func = score, func

    if best_score >= THRESHOLD and best_func:
        try:
            reply = best_func(text)
            if isinstance(reply, str) and reply.strip():
                from working_tts import working_tts
                working_tts(reply)

                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                try:
                    from context.short_term import add as ctx_add

                    ctx_add({"user": text, "reply": reply})
                except Exception:
                    pass

                return True
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –≤ —Å–∫–∏–ª–ª–µ %s: %s", func.__module__, e)

    return False

def _schedule_autoupdate(mod):
    """
    –ï—Å–ª–∏ –≤ –º–æ–¥—É–ª–µ –µ—Å—Ç—å AUTO_UPDATE_INTERVAL –∏ —Ñ—É–Ω–∫—Ü–∏—è auto_update(),
    –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç–∞–π–º–µ—Ä.  –†–µ–∑—É–ª—å—Ç–∞—Ç –ù–ï –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ TTS.
    """
    interval = getattr(mod, "AUTO_UPDATE_INTERVAL", None)
    update_fn = getattr(mod, "auto_update", None)
    if not (isinstance(interval, (int, float)) and callable(update_fn)):
        return                     # —É —Å–∫–∏–ª–ª–∞ –Ω–µ—Ç –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–∞

    def _runner():
        try:
            res = update_fn()  # —Å–∞–º —Å–∫–∏–ª–ª –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –¥–∏—Å–ø–ª–µ–π
            if asyncio.iscoroutine(res):
                asyncio.run(res)  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ async auto_update()
        except Exception as e:
            log.error("AutoUpdate %s: %s", mod.__name__, e)
        finally:  # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
            t = threading.Timer(interval, _runner)
            t.daemon = True
            _scheduled.setdefault(mod.__name__, []).append(t)
            t.start()
    _runner()  # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
